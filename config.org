#+TITLE: doom config
#+STARTUP: nofold

* Table of Contents :TOC_3:noexport:
- [[#identity][Identity]]
- [[#appearance][Appearance]]
  - [[#doc-view][Doc-view]]
  - [[#tem][Tem]]
  - [[#evil][Evil]]
  - [[#fill-column-indicator][Fill column indicator]]
  - [[#font][Font]]
  - [[#gutter][Gutter]]
  - [[#info-colors][~info-colors~]]
  - [[#line-numbers][Line numbers]]
  - [[#mixed-pitch][Mixed pitch]]
  - [[#modeline][Modeline]]
  - [[#page-break-lines][~page-break-lines~]]
  - [[#ranger][Ranger]]
  - [[#theme][Theme]]
  - [[#treemacs][Treemacs]]
  - [[#misc][Misc.]]
- [[#behaviour][Behaviour]]
  - [[#avy][Avy]]
  - [[#browser][Browser]]
  - [[#completion][Completion]]
  - [[#eshell][Eshell]]
    - [[#aliases][Aliases]]
    - [[#disable-completion-in-remote-shells][Disable completion in remote shells]]
  - [[#lsp][LSP]]
  - [[#magit][Magit]]
  - [[#scrolling][Scrolling]]
  - [[#smartparens][Smartparens]]
  - [[#spellcheck][Spellcheck]]
  - [[#tramp][TRAMP]]
  - [[#misc-1][Misc.]]
- [[#major-modes][Major Modes]]
  - [[#c][C++]]
  - [[#clojure][Clojure]]
  - [[#julia][Julia]]
  - [[#lateχ][LaTeΧ]]
  - [[#org][Org]]
    - [[#org-ref][Org ref]]
    - [[#org-roam][Org roam]]
  - [[#python][Python]]
  - [[#sh][sh]]
- [[#keybinds][Keybinds]]
  - [[#dired][Dired]]
  - [[#evil-1][Evil]]
    - [[#digraphs][Digraphs]]
  - [[#weenie-mode][Weenie mode]]
- [[#footnotes][Footnotes]]

* Identity
Set name and email for gpg
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Corin Hoad"
      user-mail-address "ch.gpg@themaw.xyz")
#+end_src

* Appearance
** Doc-view
Increase resolution to 300 dpi
#+begin_src emacs-lisp :tangle yes
(after! doc-view
  (setq doc-view-resolution 300))
#+end_src
** Tem
hOI
#+begin_src emacs-lisp :tangle yes
(setq +doom-dashboard-banner-dir "~/.doom.d/"
      +doom-dashboard-banner-file "tem.png"
      +doom-dashboard-banner-padding '(0 . 2))
#+end_src

** Evil
Use a bar cursor when in emacs state
#+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-emacs-state-cursor '(bar +evil-emacs-cursor-fn)))
#+end_src

** Fill column indicator
Disable by default
#+begin_src emacs-lisp :tangle yes
(remove-hook! '(text-mode-hook prog-mode-hook conf-mode-hook)
  #'+fill-column-enable-h)
#+end_src

** Font
Use Iosevka family
#+begin_src emacs-lisp :tangle yes
 (setq doom-font (font-spec :family "Iosevka Fixed Extended" :size 14)
       doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 14)
       doom-serif-font (font-spec :family "Iosevka Etoile" :size 14))
#+end_src
and set commands and keywords in /italics/.
#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Gutter
Swap ~git-gutter~ and ~flycheck~ markers (~flycheck~ left; ~git-gutter~ right)
#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (setq flycheck-indication-mode 'left-fringe))

(after! git-gutter-fringe
  (setq git-gutter-fr:side 'right-fringe))
#+end_src

** ~info-colors~
Extra highlighting for info-mode
#+begin_src emacs-lisp :tangle yes
(use-package! info-colors
  :after info
  :hook (Info-selection . info-colors-fontify-mode))
#+end_src

** Line numbers
Use relative line numbers
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

** Mixed pitch
Only apply ~mixed-pitch~ for specific modes rather than all text modes, else we
end up with mixed pich e.g. ~yaml-mode~
#+begin_src emacs-lisp :tangle yes
;; yaml-mode no longer drives from text-mode, so we'll see how annoying disabling this is
;; (add-hook! '(org-mode-hook LaTeX-mode-hook markdown-mode-hook help-mode-hook)
;;            #'mixed-pitch-mode)
#+end_src

** Modeline
Fallback to unicode symbols when icons cannot be used
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
  (setq doom-modeline-unicode-fallback t))
#+end_src

** ~page-break-lines~
Make form feeds pretty
#+begin_src emacs-lisp :tangle yes
(use-package! page-break-lines
  :hook ((emacs-lisp-mode help-mode) . page-break-lines-mode))
#+end_src

** Ranger
Use ~all-the-icons~
#+begin_src emacs-lisp :tangle yes
(after! ranger
  (add-hook 'ranger-mode-hook 'all-the-icons-dired-mode))
#+end_src

** Theme
Gruvbox is best theme (but doom-vibrant is nice too)
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-gruvbox
      doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+end_src

** Treemacs
Use ~all-the-icons~ in ~treemacs~
#+begin_src emacs-lisp :tangle yes
(after! doom-emacs
  (setq doom-themes-treemacs-theme "doom-colors"))
#+end_src

** Misc.
Make block cursor as wide as the character under it
#+begin_src emacs-lisp :tangle yes
(setq x-stretch-cursor t)
#+end_src

Use unicode ellipsis for truncation
#+begin_src emacs-lisp :tangle yes
(setq truncate-string-ellipsis "…")
#+end_src

* Behaviour
** Avy
Allow avy to jump between frames
#+begin_src emacs-lisp :tangle yes
(setq avy-all-windows t
      avy-all-windows-alt 'all-frames)
#+end_src

** Browser
When running on WSL, open links in Windows' browser
#+begin_src emacs-lisp :tangle yes
(after! browse-url
  (when (and
         operating-system-release  ; nil on windows
         (string-match "-[Mm]icrosoft" operating-system-release))
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
      (when (file-exists-p cmd-exe)
        (setq browse-url-generic-program  cmd-exe
              browse-url-generic-args     cmd-args
              browse-url-browser-function 'browse-url-generic)))))
#+end_src

** Completion
Trigger completion ASAP and after typing only one character and apply a fix for
company menu sometimes staying open when entering normal state. This shouldn't
happen with ~company-box~, but it does on python files so just re-add the hook
usually used by doom when ~+childframe~ is disabled.
#+begin_src emacs-lisp :tangle yes
(after! company
  (setq company-idle-delay 0
        company-minimum-prefix-length 1)

  ;; REVIEW `company-box' should behave; figure out why & remove
  (add-hook! 'evil-normal-state-entry-hook
    (defun +company-abort-h ()
      (when company-candidates
        (company-abort)))))

#+end_src
** Eshell
*** Aliases
Correct for some bad muscle memory
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "vim" "find-file"
 "nvim" "find-file"
 "emacs" "find=file")
#+end_src

Useful aliases from my ~.zshrc~
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "pie" "perl -pi -e"
 "srsync" "rsync -avzPe ssh")
#+end_src

**** grml aliases and functions
Add aliases and functions from grml's ~zsh~ config to ~eshell~.

These commands can be (more or less) directly translated:
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "cdt" "cd ${mktemp -d}; pwd"
 "da" "du -sch"
 "dir" "ls -lSrah"
 "insecscp" "scp -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\""
 "l" "ls -l"
 "la" "ls -la"
 "lh" "ls -hAl"
 "ll" "ls -l"
 "llog" "sudo journalctl -f"
 "llog" "sudo journalctl"
 "mkcd" "mkdir -p $1; cd $1" ;; will not inform if dir already exists
 "rmcdir" "cd ..; *rmdir $- || cd $-") ;; built-in rmdir does not return non-zero
#+end_src

Other commands rely on ~zsh~'s more advanced globbing capabilities[fn:1] and cannot be
easily replicated using ~eshell~. Currently unimplemented:
 + =accessed=
 + =bk=
 + =changed=
 + =cl= (tricky because eshell's cd doesn't seem to return non-zero when you
   attempt to cd to a non-existent directory)
 + =trans=
 + =simple-extract=/=se= (big job)
 + =modified=
 + =lad=
 + =lsa=
 + =lsbig=
 + =lsd=
 + =lse=
 + =lsl=
 + =lsnew=
 + =lsnewdir=
 + =lsold=
 + =lsolddir=
 + =lss=
 + =lssmall=
 + =lsw=
 + =lsx=
 + =sll=

No need to implement:
 - =grep=
 - =grml-version=
 - =grml-wallpaper=
 - =hbp=
 - =hgdi=
 - =hgstat=
 - =inplaceMkDirs=
 - =insecssh=
 - =llog=
 - =tlog=
 - =xtrename=
 - All the Debian-specific commands
 - All the global functions (except =sll=)
** LSP
Allow LSP servers to handle indentation an format code when typing
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (setq lsp-enable-indentation t
        lsp-enable-on-type-formatting t))
#+end_src

** Magit
Use ~magit-delta~ for better diffs (requires ~delta~ to be installed)
#+begin_src emacs-lisp :tangle yes
(use-package! magit-delta
  :when (featurep! :tools git)
  :after magit)

(after! magit
  (magit-delta-mode +1))
#+end_src

** Scrolling
Set scroll margins
#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 5
      hscroll-margin 10
      display-line-numbers-type 'relative)
#+end_src

** Smartparens
Don't auto-match
#+begin_src emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

** Spellcheck
Set spelling and langtool language to British English
#+begin_src emacs-lisp :tangle yes
(setq ispell-dictionary "en_GB"
      langtool-default-language "en-GB")
#+end_src

** TRAMP
Set up ~root~ access on remote machines
#+begin_src emacs-lisp :tangle yes
(after! tramp
  (add-to-list 'tramp-default-proxies-alist
               '("^dionysus2$" "^root$" "/ssh:corin@dionysus2:")))
#+end_src

** Misc.
Set tab width to 4
#+begin_src emacs-lisp :tangle yes
(setq tab-width 4)
#+end_src

Only get/save auth info to an encrypted file
#+begin_src emacs-lisp :tangle yes
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src

Cache ~gpg~ passphrase
#+begin_src emacs-lisp :tangle yes
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src
* Major Modes
** C++
Use BSD-style indentation with a tab width of 4
#+begin_src emacs-lisp :tangle yes
(after! cc-mode
  (setq c-default-style "bsd"
        c-basic-offset 4))
#+end_src

** Clojure
Use ~flycheck-clojure~ for more thorough linting (~eastwood~ and ~kibit~)
#+begin_src emacs-lisp :tangle yes
(use-package! flycheck-clojure
  :when (and (featurep! :checkers syntax) (featurep! :lang clojure))
  :after (flycheck clojure-mode)
  :commands (flycheck-clojure-setup))

(after! (flycheck cider)
  (flycheck-clojure-setup)) ; must be run after cider
#+end_src

Use ~cljr-refactor~ to rename variables, rather than LSP
#+begin_src emacs-lisp :tangle yes
(map! :map clojure-mode-map
      [remap lsp-rename] #'cljr-rename-symbol)
#+end_src

Don't warn about operations that need to build the AST
#+begin_src emacs-lisp :tangle yes
(after! clj-refactor
  (setq cljr-warn-on-eval nil))
#+end_src

** Julia
LSP fix
#+begin_src emacs-lisp :tangle yes
(setq lsp-julia-default-environment "~/.julia/environments/v1.5.3")

(after! julia-mode
  (add-hook! 'julia-mode-hook
    (setq-local lsp-enable-folding t)))
#+end_src

** LaTeΧ
Render scripts and subscripts at full size, and set =\item= indent
#+begin_src emacs-lisp :tangle yes
(after! tex-mode
  (setq tex-fontify-script nil
        font-latex-fontify-script nil
        LaTeX-indent-level 4
        LaTeX-item-indent -2))
#+end_src

Make fill (=gwip=/=gqip=) use ~LaTeX-fill-region~ so indents are respected
#+begin_src emacs-lisp :tangle yes
(after! tex-mode
  (evil-define-operator evil-LaTeX-fill (beg end)
    :move-point nil
    :type line
    (save-excursion
      (condition-case nil
          (LaTeX-fill-region beg end)
        (error nil))))

  (evil-define-operator evil-LaTeX-fill-and-move (beg end)
    :move-point nil
    :type line
    (let ((marker (make-marker)))
      (move-marker marker (1- end))
      (condition-case nil
          (progn
            (LaTeX-fill-region beg end)
            (goto-char marker)
            (evil-first-non-blank))
        (error nil))))

  (evil-define-key 'normal LaTeX-mode-map "gw"
    #'evil-LaTeX-fill)
  (evil-define-key 'normal LaTeX-mode-map "gq"
    #'evil-LaTeX-fill-and-move))
#+end_src

Use ~lsp-latex~ or diagnostics don't work, and use it to build
#+begin_src emacs-lisp :tangle yes
(use-package! lsp-latex
  :when (and (featurep! :tools lsp) (featurep! :lang latex))
  ;; :after lsp
  :config
  (setq lsp-latex-lint-on-save t)
  (map! :map LaTeX-mode-map
        [remap compile] #'lsp-latex-build))
#+end_src

** Org
Set =org= directory (before =org= loads!)
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org/")
#+end_src

Allow =TAB= to open full subtrees
#+begin_src emacs-lisp :tangle yes
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

Set =C-k= back to ~evil-insert-digraph~ and add arrow-key equivalents for some
motions
#+begin_src emacs-lisp :tangle yes
(map! :after evil-org
      :map evil-org-mode-map
      :i   "C-k"       'evil-insert-digraph

      :nvm "g <left>"  'org-up-element
      :nvm "g <up>"    'outline-backward-same-level
      :nvm "g <down>"  'outline-forward-same-level

      :nvm "C-<up>"    'outline-backward-same-level
      :nvm "C-<down>"  'outline-forward-same-level)
#+end_src

Enable inline tasks export to GitHub-flavoured markdown, and export to
reStructuredText.
#+begin_src emacs-lisp :tangle yes
(after! org
  (require 'org-inlinetask)
  (require 'ox-gfm nil t)
  (require 'ox-rst))
#+end_src
*** Org ref
Add ~org-ref~ and use ~ivy~ as much as possible.
#+begin_src emacs-lisp :tangle yes
(use-package! org-ref
  :after org
  :config
  (setq org-ref-notes-directory "~/org/ref/notes"
        org-ref-default-bibliography '("~/org/ref/org-ref.bib")
        org-ref-pdf-directory "~/org/ref/pdf"

        org-ref-completion-library 'org-ref-ivy-cite))
#+end_src

*** Org roam
Don't get titles from the headline and encrypt files
#+begin_src emacs-lisp :tangle yes
(after! org-roam
  (setq org-roam-title-sources '(title alias)
        org-roam-encrypt-files t))
#+end_src

Integrate with ~org-ref~
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-bibtex
  :after (org-roam org-ref))
#+end_src


** Python
Tell ~black~ to use 80-character lines
#+begin_src emacs-lisp :tangle yes
(after! (python format-all)
  (set-formatter! 'black "black -q -l 80 -"))
#+end_src

Use the beta version of ~mspyls~
#+begin_src emacs-lisp :tangle yes
(after! lsp-python-ms
  (setq lsp-python-ms-nupkg-channel "beta"))
#+end_src

** sh
Set indent to 2
#+begin_src emacs-lisp :tangle yes
(setq sh-basic-offset 2)
(add-hook! 'sh-mode-hook
  (setq-local evil-shift-width sh-basic-offset
              tab-width sh-basic-offset))
#+end_src

Make =shfmt= use spaces
#+begin_src emacs-lisp :tangle yes
(after! (sh format-all)
  (set-formatter! 'shfmt "shfmt -i 2"))
#+end_src

* Keybinds
** Dired
Open dired in project root with =p -=
#+begin_src emacs-lisp :tangle yes
(map! :leader
      "p -" 'projectile-dired)
#+end_src

** Evil
=RET=/=S-RET= create a line below/above
#+begin_src emacs-lisp :tangle yes
(after! evil
  (defun insert-line-below (n)
    "Insert an empty line below the current line."
    (interactive "p")
    (evil-open-below n)
    (evil-normal-state))

  (defun insert-line-above (n)
    "Insert an empty line above the current line."
    (interactive "p")
    (evil-open-above n)
    (evil-normal-state))

  (map! :n "<RET>"      'insert-line-below
        :n "S-<return>" 'insert-line-above))
#+end_src

Create a text quote object so e.g. =diq= deletes inside quotes. Works with ='=,
="=, =«=, =`=, and =“=.
#+begin_src emacs-lisp :tangle yes
(after! evil
  (require 'evil-textobj-anyblock)
  (evil-define-text-object my-evil-textobj-anyblock-inner-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("«" . "»")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count nil)))

  (evil-define-text-object my-evil-textobj-anyblock-a-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("«" . "»")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count t)))

  (define-key evil-inner-text-objects-map "q" 'my-evil-textobj-anyblock-inner-quote)
  (define-key evil-outer-text-objects-map "q" 'my-evil-textobj-anyblock-a-quote))
#+end_src

*** Digraphs
Add more digraphs
#+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-digraphs-table-user '(((?* ?e) . ?ϵ)
                                   ((?* ?f) . ?ϖ)
                                   ((?* ?h) . ?ϑ)
                                   ((?* ?r) . ?ϱ)
                                   ((?, ?.) . ?…)
                                   ((?h ?-) . ?ℏ))))
#+end_src

** Weenie mode
#+begin_src emacs-lisp :tangle yes
(map! :prefix "C-w"
      :nv "<left>"      'evil-window-left
      :nv "<right>"     'evil-window-right
      :nv "<up>"        'evil-window-up
      :nv "<down>"      'evil-window-down
      :nv "C-<left>"    'evil-window-left
      :nv "C-<right>"   'evil-window-right
      :nv "C-<up>"      'evil-window-up
      :nv "C-<down>"    'evil-window-down
      :nv "S-<left>"    '+evil/window-move-left
      :nv "S-<right>"   '+evil/window-move-right
      :nv "S-<up>"      '+evil/window-move-up
      :nv "S-<down>"    '+evil/window-move-down
      :nv "C-S-<left>"  'evil-window-move-far-left
      :nv "C-S-<right>" 'evil-window-move-far-right
      :nv "C-S-<up>"    'evil-window-move-very-top
      :nv "C-S-<down>"  'evil-window-move-very-bottom)
(map! :leader
      "w SPC"         'rotate-layout
      "w <left>"      'evil-window-left
      "w <right>"     'evil-window-right
      "w <up>"        'evil-window-up
      "w <down>"      'evil-window-down
      "w C-<left>"    'evil-window-left
      "w C-<right>"   'evil-window-right
      "w C-<up>"      'evil-window-up
      "w C-<down>"    'evil-window-down
      "w S-<left>"    '+evil/window-move-left
      "w S-<right>"   '+evil/window-move-right
      "w S-<up>"      '+evil/window-move-up
      "w S-<down>"    '+evil/window-move-down
      "w C-S-<left>"  'evil-window-move-far-left
      "w C-S-<right>" 'evil-window-move-far-right
      "w C-S-<up>"    'evil-window-move-very-top
      "w C-S-<down>"  'evil-window-move-very-bottom)
#+end_src

* Footnotes

[fn:1] ~eshell~ does have some of the globbing functionality needed, namely
predicates/qualifiers, but globs with qualifiers and no matches in ~eshell~ are
not left unchanged ([[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13_03][the zsh/POSIX behaviour]]) but instead are empty. This is an
issue when using ~ls~, as ~ls~ with no argument - i.e. when there are no
matches - will effectively ignore the provided pattern. Note that ~eshell~ globs
only behave in this manner when a qualifier is provided.
