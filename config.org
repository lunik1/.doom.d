#+title: doom config
#+startup: nofold

* Table of Contents :TOC_3:noexport:
- [[#identity][Identity]]
- [[#appearance][Appearance]]
  - [[#doc-view][Doc-view]]
  - [[#tem][Tem]]
  - [[#evil][Evil]]
  - [[#fill-column-indicator][Fill column indicator]]
  - [[#font][Font]]
  - [[#gutter][Gutter]]
  - [[#info-colors][~info-colors~]]
  - [[#ligatures][Ligatures]]
  - [[#line-numbers][Line numbers]]
  - [[#mixed-pitch][Mixed pitch]]
  - [[#modeline][Modeline]]
  - [[#page-break-lines][~page-break-lines~]]
  - [[#ranger][Ranger]]
  - [[#theme][Theme]]
  - [[#treemacs][Treemacs]]
  - [[#misc][Misc.]]
- [[#behaviour][Behaviour]]
  - [[#avy][Avy]]
  - [[#browser][Browser]]
  - [[#completion][Completion]]
  - [[#docker][Docker]]
  - [[#eshell][Eshell]]
    - [[#aliases][Aliases]]
    - [[#disable-completion-in-remote-shells][Disable completion in remote shells]]
  - [[#keyfreq][Keyfreq]]
  - [[#lsp][LSP]]
  - [[#magit][Magit]]
  - [[#pinentry][Pinentry]]
  - [[#scrolling][Scrolling]]
  - [[#spellcheck][Spellcheck]]
  - [[#tramp][TRAMP]]
  - [[#vterm][Vterm]]
  - [[#misc-1][Misc.]]
- [[#major-modes][Major Modes]]
  - [[#beancount][Beancount]]
  - [[#c][C++]]
  - [[#clojure][Clojure]]
  - [[#julia][Julia]]
  - [[#lateχ][LaTeΧ]]
  - [[#nix][Nix]]
  - [[#org][Org]]
    - [[#appearance-1][Appearance]]
    - [[#org-roam][Org roam]]
    - [[#exporting][Exporting]]
  - [[#python][Python]]
  - [[#sh][sh]]
- [[#toml][TOML]]
- [[#keybinds][Keybinds]]
  - [[#dired][Dired]]
  - [[#evil-1][Evil]]
    - [[#digraphs][Digraphs]]
  - [[#window-management][Window management]]
  - [[#weenie-mode][Weenie mode]]
- [[#footnotes][Footnotes]]

* Identity
Set name and email for gpg
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Corin Hoad"
      user-mail-address "ch.gpg@themaw.xyz")
#+end_src

* Appearance
** Doc-view
Increase resolution to 300 dpi
#+begin_src emacs-lisp :tangle yes
(after! doc-view
  (setq doc-view-resolution 300))
#+end_src
** Tem
hOI
[[file:tem.png]]
#+begin_src emacs-lisp :tangle yes
(setq +doom-dashboard-banner-dir "~/.doom.d/"
      +doom-dashboard-banner-file "tem.png"
      +doom-dashboard-banner-padding '(0 . 2))
#+end_src

** Evil
Use a bar cursor when in emacs state
#+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-emacs-state-cursor '(bar +evil-emacs-cursor-fn)))
#+end_src

** Fill column indicator
Disable by default
#+begin_src emacs-lisp :tangle yes
(remove-hook! '(text-mode-hook prog-mode-hook conf-mode-hook)
  #'+fill-column-enable-h)
#+end_src

** Font
Use Myosevka family
#+begin_src emacs-lisp :tangle yes
 (setq doom-font (font-spec :family "Myosevka" :size 14)
       doom-unicode-font (font-spec :family "Julia Mono")
       doom-variable-pitch-font (font-spec :family "Myosevka Etoile" :size 14)
       doom-serif-font (font-spec :family "Myosevka Etoile" :size 14))
#+end_src
and set commands and keywords in /italics/.
#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Gutter
Swap ~git-gutter~ and ~flycheck~ markers (~flycheck~ left; ~git-gutter~ right)
#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (setq flycheck-indication-mode 'left-fringe))

(after! git-gutter-fringe
  (setq git-gutter-fr:side 'right-fringe))
#+end_src

** ~info-colors~
Extra highlighting for info-mode
#+begin_src emacs-lisp :tangle yes
(use-package! info-colors
  :after info
  :hook (Info-selection . info-colors-fontify-node))
#+end_src

** Ligatures
I'm generally not a big fan of ligatures, but they do look nice in =org-mode= so
let's keep only the =org-mode= ligatures:
#+begin_src emacs-lisp :tangle yes
(setq +ligatures-in-modes '(org-mode)
      +ligatures-extras-in-modes '(org-mode))

(setq +ligatures-extra-symbols
      '(;; org
        :name          "»"
        :src_block     "›"
        :src_block_end "‹"
        :quote         "“"
        :quote_end     "”"))
#+end_src

** Line numbers
Use relative line numbers
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

** Mixed pitch
Only apply ~mixed-pitch~ for specific modes rather than all text modes, else we
end up with mixed pich e.g. ~yaml-mode~
#+begin_src emacs-lisp :tangle yes
;; yaml-mode no longer drives from text-mode, so we'll see how annoying enabling
;; for all text modes is
(add-hook! 'text-mode-hook #'mixed-pitch-mode)
#+end_src

** Modeline
Fallback to unicode symbols when icons cannot be used
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
  (setq doom-modeline-unicode-fallback t))
#+end_src

** ~page-break-lines~
Make form feeds pretty
#+begin_src emacs-lisp :tangle yes
(use-package! page-break-lines
  :hook ((emacs-lisp-mode help-mode) . page-break-lines-mode))
#+end_src

** Ranger
Use ~all-the-icons~
#+begin_src emacs-lisp :tangle yes
(after! ranger
  (add-hook 'ranger-mode-hook 'all-the-icons-dired-mode))
#+end_src

Often when I open =deer= I immediately switch to =ranger=, so add binding to open
=ranger= directly.
#+begin_src emacs-lisp :tangle yes
(map! :leader
      "o _" 'ranger)
#+end_src
** Theme
Gruvbox is best theme (but doom-vibrant is nice too)
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-gruvbox
      doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+end_src

** Treemacs
Use ~all-the-icons~ in ~treemacs~
#+begin_src emacs-lisp :tangle yes
(after! treemacs
  (setq doom-themes-treemacs-theme "doom-colors"))
#+end_src

** Misc.
Make block cursor as wide as the character under it
#+begin_src emacs-lisp :tangle yes
(setq x-stretch-cursor t)
#+end_src

Use unicode ellipsis for truncation
#+begin_src emacs-lisp :tangle yes
(setq truncate-string-ellipsis "…")
#+end_src

* Behaviour
** Avy
Allow avy to jump between frames
#+begin_src emacs-lisp :tangle yes
(setq avy-all-windows t
      avy-all-windows-alt 'all-frames)
#+end_src

** Browser
When running on WSL, open links in Windows' browser
#+begin_src emacs-lisp :tangle yes
(after! browse-url
  (when (and
         operating-system-release  ; nil on windows
         (string-match "-[Mm]icrosoft" operating-system-release))
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
      (when (file-exists-p cmd-exe)
        (setq browse-url-generic-program  cmd-exe
              browse-url-generic-args     cmd-args
              browse-url-browser-function 'browse-url-generic)))))
#+end_src

** Completion
Trigger completion ASAP and after typing only one character. Apply a fix for
company menu sometimes staying open when entering normal state. This shouldn't
happen with ~company-box~, but it does on python files so just re-add the hook
usually used by doom when ~+childframe~ is disabled.
#+begin_src emacs-lisp :tangle yes
(after! company
  (setq company-idle-delay 0
        company-minimum-prefix-length 1)

  ;; REVIEW `company-box' should behave; figure out why & remove
  (add-hook! 'evil-normal-state-entry-hook
    (defun +company-abort-h ()
      (when company-candidates
        (company-abort)))))
#+end_src

** Docker
Adding yourself to the =docker+ group is generally a bad idea, from the Docker manual:
#+begin_quote
Warning

The docker group grants privileges equivalent to the =root= user.
#+end_quote
so we need to tell =docker.el= to run Docker as root
#+begin_src emacs-lisp :tangle yes
(after! docker
  (setq docker-run-as-root t))
#+end_src

** Eshell
*** Aliases
Correct for some bad muscle memory
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "vi" "find-file"
 "vim" "find-file"
 "nvim" "find-file"
 "emacs" "find-file")
#+end_src

Useful aliases from my ~.zshrc~
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "pie" "perl -pi -e"
 "rsync" "rsync -avzhPHA --checksum-choice=xxh3 --compress-choice=lz4 --info=progress2"
 "srsync" "rsync --checksum-choice=xxh3 --compress-choice=zstd --info=progress2 -avzPhHAe ssh")
#+end_src

**** grml aliases and functions
Add aliases and functions from grml's ~zsh~ config to ~eshell~.

These commands can be (more or less) directly translated:
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
 "cdt" "cd ${mktemp -d}; pwd"
 "da" "du -sch"
 "dir" "ls -lSrah"
 "insecscp" "scp -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\""
 "l" "ls -l"
 "la" "ls -la"
 "lh" "ls -hAl"
 "ll" "ls -l"
 "llog" "sudo journalctl -f"
 "llog" "sudo journalctl"
 "mkcd" "mkdir -p $1; cd $1" ;; will not inform if dir already exists
 "rmcdir" "cd ..; *rmdir $- || cd $-") ;; built-in rmdir does not return non-zero
#+end_src

Other commands rely on ~zsh~'s more advanced globbing capabilities[fn:1] and cannot be
easily replicated using ~eshell~. Currently unimplemented:
 + =accessed=
 + =bk=
 + =changed=
 + =cl= (tricky because eshell's cd doesn't seem to return non-zero when you
   attempt to cd to a non-existent directory)
 + =trans=
 + =simple-extract=/=se= (big job)
 + =modified=
 + =lad=
 + =lsa=
 + =lsbig=
 + =lsd=
 + =lse=
 + =lsl=
 + =lsnew=
 + =lsnewdir=
 + =lsold=
 + =lsolddir=
 + =lss=
 + =lssmall=
 + =lsw=
 + =lsx=
 + =sll=

No need to implement:
 - =grep=
 - =grml-version=
 - =grml-wallpaper=
 - =hbp=
 - =hgdi=
 - =hgstat=
 - =inplaceMkDirs=
 - =insecssh=
 - =llog=
 - =tlog=
 - =xtrename=
 - All the Debian-specific commands
 - All the global functions (except =sll=)
*** Disable completion in remote shells
Over TRAMP, =eshell='s completion is /unusably/ laggy. Current solution only
works if we open eshell in a remote dir (e.g. via ~SPC o t~), not if we ssh in.
#+begin_src emacs-lisp :tangle yes
;; Only works if we open eshell in a remote dir (e.g. via SPC o t), not if we ssh
(add-hook! 'eshell-mode-hook 'disable-company-remote)

(defun disable-company-remote ()
  (when (and (fboundp 'company-mode)
             (file-remote-p default-directory))
    (company-mode -1)))
#+end_src
** Keyfreq
Track command usage
#+begin_src emacs-lisp :tangle yes
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src
** LSP
Allow LSP servers to handle indentation an format code when typing
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (setq lsp-enable-indentation t
        lsp-enable-on-type-formatting t))
#+end_src

** Magit
Use ~magit-delta~ for better diffs (requires ~delta~ to be installed)
#+begin_src emacs-lisp :tangle yes
(use-package! magit-delta
  :when (featurep! :tools git)
  :after magit)

(after! magit
  (magit-delta-mode +1)
  (setq magit-delta-delta-args
        '("--24-bit-color" "always"
          "--features" "magit-delta"
          "--color-only"))
  )
#+end_src

** Pinentry
#+begin_src emacs-lisp :tangle yes
(use-package! pinentry
        :init (pinentry-start))
#+end_src

** Scrolling
Set scroll margins
#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 5
      hscroll-margin 10
      display-line-numbers-type 'relative)
#+end_src

** Spellcheck
Set spelling and langtool language to British English
#+begin_src emacs-lisp :tangle yes
(setq ispell-dictionary "en_GB"
      ispell-personal-dictionary "~/.aspell.en.pws"
      langtool-default-language "en-GB")
#+end_src

** TRAMP
Set TRAMP's terminal type to "tramp" so we can set specific config for it in
shell rc files by checking ~$TERM~.
#+begin_src emacs-lisp :tangle yes
(after! tramp
 (setq tramp-terminal-type "tramp"))
#+end_src

Set up ~root~ access on remote machines
#+begin_src emacs-lisp :tangle yes
(after! tramp
  (add-to-list 'tramp-default-proxies-alist
               '("^dionysus2$" "^root$" "/ssh:corin@dionysus2:")))
#+end_src

Many of the machines I access use ~home-manager~, which keeps binaries
=~/.nix-profile/bin=. Ensure that TRAMP can find and use these, including
binaries in any other extra locations specified on the host's ~$PATH@, by
adding ~tramp-own-remote-path~ to ~tramp-remote-path.
#+begin_src emacs-lisp :tangle yes
(after! tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

** Vterm
Integration with the system shell and emacs can be improved by passing commands from vterm to emacs via escape sequences. The functions vterm can access in this way must be whitelisted.
#+begin_src emacs-lisp :tangle yes
(after! vterm
  (setf (alist-get "woman" vterm-eval-cmds nil nil #'equal)
        '((lambda (topic)
            (woman topic))))
  (setf (alist-get "ranger" vterm-eval-cmds nil nil #'equal)
        '((lambda (dir)
            (message "test poop")
            (message dir)
            (ranger dir))))
  (setf (alist-get "dired" vterm-eval-cmds nil nil #'equal)
        '((lambda (dir)
            (dired dir)))))
#+end_src

** Misc.
Set tab width to 4
#+begin_src emacs-lisp :tangle yes
(setq tab-width 4)
#+end_src

Only get/save auth info to an encrypted file
#+begin_src emacs-lisp :tangle yes
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src

Cache ~gpg~ passphrase
#+begin_src emacs-lisp :tangle yes
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src
* Major Modes
** Beancount
Use ~bean-format~ to format =.beancount= files
#+begin_src emacs-lisp :tangle yes
(after! (beancount format-all)
  (set-formatter! 'bean-format "bean-format" :modes 'beancount-mode))
#+end_src
** C++
Use BSD-style indentation with a tab width of 4
#+begin_src emacs-lisp :tangle yes
(after! cc-mode
  (setq c-default-style "bsd"
        c-basic-offset 4))
#+end_src

** Clojure
Use ~flycheck-clojure~ for more thorough linting (~eastwood~ and ~kibit~)
#+begin_src emacs-lisp :tangle yes
(use-package! flycheck-clojure
  :when (and (featurep! :checkers syntax) (featurep! :lang clojure))
  :after (flycheck clojure-mode)
  :commands (flycheck-clojure-setup))

(after! (flycheck cider)
  (flycheck-clojure-setup)) ; must be run after cider
#+end_src

Don't warn about operations that need to build the AST
#+begin_src emacs-lisp :tangle yes
(after! clj-refactor
  (setq cljr-warn-on-eval nil))
#+end_src

Don't use the lsp's formatter, prefer zprint
#+begin_src emacs-lisp :tangle yes
(after! (clojure-mode format-all)
  (set-formatter! 'zprint '("zprint" "{:search-config? true}")
    :modes '(clojure-mode)))
(after! (clojure-mode lsp-mode)
  (setq-hook! 'clojure-mode-hook +format-with-lsp nil))
#+end_src

** Julia
LSP fix
#+begin_src emacs-lisp :tangle yes
(setq lsp-julia-default-environment "~/.julia/environments/v1.5.3")

(after! julia-mode
  (add-hook! 'julia-mode-hook
    (setq-local lsp-enable-folding t)))
#+end_src

** LaTeΧ
Render scripts and subscripts at full size, and set =\item= indent
#+begin_src emacs-lisp :tangle yes
(after! tex-mode
  (setq tex-fontify-script nil
        font-latex-fontify-script nil
        LaTeX-indent-level 4
        LaTeX-item-indent -2))
#+end_src

Make fill (=gwip=/=gqip=) use ~LaTeX-fill-region~ so indents are respected
#+begin_src emacs-lisp :tangle yes
(after! tex-mode
  (evil-define-operator evil-LaTeX-fill (beg end)
    :move-point nil
    :type line
    (save-excursion
      (condition-case nil
          (LaTeX-fill-region beg end)
        (error nil))))

  (evil-define-operator evil-LaTeX-fill-and-move (beg end)
    :move-point nil
    :type line
    (let ((marker (make-marker)))
      (move-marker marker (1- end))
      (condition-case nil
          (progn
            (LaTeX-fill-region beg end)
            (goto-char marker)
            (evil-first-non-blank))
        (error nil))))

  (evil-define-key 'normal LaTeX-mode-map "gw"
    #'evil-LaTeX-fill)
  (evil-define-key 'normal LaTeX-mode-map "gq"
    #'evil-LaTeX-fill-and-move))
#+end_src

** Nix
Technically nix-mode only supports ~nixfmt~, but we can get around this by using lies.
#+begin_src emacs-lisp :tangle yes
(after! nix-mode
  (setq nix-nixfmt-bin "nixpkgs-fmt"))
#+end_src

** Org
:PROPERTIES:
:CUSTOM_ID: org
:header-args:emacs-lisp: :tangle no :noweb-ref org-conf
:END:
Set =org= directory. Doom's template =config.el= recommends this is done
/before/ org loads.
#+begin_src emacs-lisp :tangle yes :noweb-ref nil
(setq org-directory "~/org/")
#+end_src

Org mode is a big boy so wrap up all this config in an ~after!~ using noweb
magic
#+begin_src emacs-lisp :noweb no-export :tangle yes :noweb-ref nil
(after! org
  <<org-conf>>
)
#+end_src

Tecosaur has spent much more time in =org-mode= than me, so steal their defaults:
#+begin_src emacs-lisp
(setq org-use-property-inheritance t
      org-pretty-entities nil
      org-log-done 'time ; matches behaviour of orgzly
      org-list-allow-alphabetical t
      org-export-in-background nil
      org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f")
      org-latex-listings 'minted
      org-latex-packages-alist '(("cache=false" "minted"))
      org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src

Use Luatex for inline latex previews so we can have unicode support
#+begin_src emacs-lisp
(unless (assq 'luadvisvg org-preview-latex-process-alist)
  (setq org-preview-latex-process-alist
        (cl-acons 'luaimagemagick
                  '(:programs ("lualatex" "convert")
                    :description "pdf > png (via lualatex)"
                    :message "you need to install the programs: lualatex and imagemagick."
                    :image-input-type "pdf"
                    :image-output-type "png"
                    :image-size-adjust (1.0 . 1.0)
                    :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
                    :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))
                  org-preview-latex-process-alist)
        org-preview-latex-default-process 'luaimagemagick))
#+end_src

Allow =TAB= to open full subtrees
#+begin_src emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

Set =C-k= back to ~evil-insert-digraph~ and add arrow-key equivalents for some
motions
#+begin_src emacs-lisp
(map! :after evil-org
      :map evil-org-mode-map
      :i   "C-k"       'evil-insert-digraph

      :nvm "g <left>"  'org-up-element
      :nvm "g <right>" 'org-down-element
      :nvm "g <up>"    'outline-backward-same-level
      :nvm "g <down>"  'outline-forward-same-level)

      ;; :nvm "C-<up>"    'outline-backward-same-level
      ;; :nvm "C-<down>"  'outline-forward-same-level)
#+end_src

Enable inline tasks
#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src

Using =pandoc= as an intermediary, non-org files can be edited in org!
#+begin_src emacs-lisp
(use-package! org-pandoc-import)
#+end_src

*** Appearance
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode)
#+end_src

=▾= is a more common indicator for a collapsed section
#+begin_src emacs-lisp
(setq org-ellipsis " ▾ ")
#+end_src

=org-appear= allows *,/,=,~ etc. to only be shown when under the cursor
#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t)
  ;; for proper first-time setup, `org-appear--set-fragments'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-fragments))
#+end_src

…and we can get similar behaviour for inline \(\LaTeX\) with =org-fragtog=
#+begin_src emacs-lisp
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

Set outline in sans serif
#+begin_src emacs-lisp
(custom-set-faces!
  '(outline-1 :family "Myosevka Aile")
  '(outline-2 :family "Myosevka Aile")
  '(outline-3 :family "Myosevka Aile")
  '(outline-4 :family "Myosevka Aile")
  '(outline-5 :family "Myosevka Aile")
  '(outline-6 :family "Myosevka Aile")
  '(outline-8 :family "Myosevka Aile")
  '(outline-9 :family "Myosevka Aile"))
#+end_src

*** Org roam
Don't get titles from the headline and encrypt files
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-title-sources '(title alias)))
#+end_src

Integrate with ~org-ref~
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after (org-roam org-ref))
#+end_src

*** Exporting
Add some useful backends not included by default
#+begin_src emacs-lisp
(require 'ox-gfm nil t)
(require 'ox-rst)
(require 'ox-koma-letter)
#+end_src

By default, ~org-export-smart-quotes-alist~ does not contain an entry for =en-gb=,
so create one copying =en='s value.
#+begin_src emacs-lisp
(after! ox
  (setq org-export-smart-quotes-alist
        (cons (cons "en-gb" (cdr (assoc "en" org-export-smart-quotes-alist)))
              org-export-smart-quotes-alist)))
#+end_src

**** LaTeX
***** Beamer
Metropolis is the only nice Beamer theme, so make it the default
#+begin_src emacs-lisp
;; (setq org-beamer-theme "[progressbar=foot]metropolis")
#+end_src

** Python
Don't use the LSP's formatter (use =black=)
#+begin_src emacs-lisp :tangle yes
(setq-hook! 'python-mode-hook +format-with-lsp nil)
#+end_src

Pyright's linting isn't very extensive, so enable some additional linters. When
using lsp-mode, this requires chaining the checkers to the ~lsp~ checker; more
discussion is in [[https://github.com/hlissner/doom-emacs/issues/1530][this issue]]. We will also explicitly disable ~mypy~, as it is redundant
with pyright.
#+begin_src emacs-lisp :tangle yes
(add-hook! 'lsp-after-initialize-hook
  (run-hooks (intern (format "%s-lsp-hook" major-mode))))

(defun python-flycheck-setup ()
  (flycheck-add-next-checker 'lsp 'python-flake8)
  (flycheck-add-next-checker 'lsp 'python-pylint)
  (flycheck-add-next-checker 'lsp 'python-pycompile)
  (add-to-list 'flycheck-disabled-checkers 'python-mypy))
(add-hook 'python-mode-lsp-hook
          #'python-flycheck-setup)
#+end_src

** sh
Set indent to 2
#+begin_src emacs-lisp :tangle yes
(setq sh-basic-offset 2)
(add-hook! 'sh-mode-hook
  (setq-local evil-shift-width sh-basic-offset
              tab-width sh-basic-offset))
#+end_src

Make =shfmt= use spaces
#+begin_src emacs-lisp :tangle yes
(after! (format-all)
  (set-formatter! 'shfmt "shfmt -i 2"))
#+end_src

* TOML
Use =taplo= to format TOML files
#+begin_src emacs-lisp :tangle yes
(after! (format-all)
  (set-formatter! 'taplo "taplo fmt -" :modes 'conf-toml-mode))
#+end_src

* Keybinds
** Dired
Open dired in project root with =p -=
#+begin_src emacs-lisp :tangle yes
(map! :leader
      "p -" 'projectile-dired)
#+end_src

** Evil
=RET=/=S-RET= create a line below/above
#+begin_src emacs-lisp :tangle yes
(after! evil
  (defun insert-line-below (n)
    "Insert an empty line below the current line."
    (interactive "p")
    (evil-open-below n)
    (evil-normal-state))

  (defun insert-line-above (n)
    "Insert an empty line above the current line."
    (interactive "p")
    (evil-open-above n)
    (evil-normal-state))

  (map! :n "<RET>"      'insert-line-below
        :n "S-<return>" 'insert-line-above))
#+end_src

Create a text quote object so e.g. =diq= deletes inside quotes. Works with ='=,
="=, =«=, =`=, and =“=.
#+begin_src emacs-lisp :tangle yes
(after! evil
  (require 'evil-textobj-anyblock)
  (evil-define-text-object my-evil-textobj-anyblock-inner-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("«" . "»")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count nil)))

  (evil-define-text-object my-evil-textobj-anyblock-a-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("«" . "»")
             ("`" . "`")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count t)))

  (define-key evil-inner-text-objects-map "q"
    'my-evil-textobj-anyblock-inner-quote)
  (define-key evil-outer-text-objects-map "q"
    'my-evil-textobj-anyblock-a-quote))
#+end_src

*** Digraphs
Add more digraphs
#+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-digraphs-table-user '(((?* ?e) . ?ϵ)
                                   ((?* ?f) . ?ϖ)
                                   ((?* ?h) . ?ϑ)
                                   ((?* ?r) . ?ϱ)
                                   ((?, ?.) . ?…)
                                   ((?| ?>) . ?↦) ; \mapsto
                                   ((?< ?|) . ?↤)
                                   ((?/ ?E) . ?∄)
                                   ((?h ?-) . ?ℏ))))
#+end_src

** Window management
This is like ~tear-off-window~, but preserves the window in the current frame
#+begin_src emacs-lisp :tangle yes
(map! :prefix "C-w"
      :nv "f" 'make-frame-command)
(map! :leader
      "w f"   'make-frame-command)
#+end_src

** Weenie mode
#+begin_src emacs-lisp :tangle yes
(map! :prefix "C-w"
      :nv "<left>"      'evil-window-left
      :nv "<right>"     'evil-window-right
      :nv "<up>"        'evil-window-up
      :nv "<down>"      'evil-window-down
      :nv "C-<left>"    'evil-window-left
      :nv "C-<right>"   'evil-window-right
      :nv "C-<up>"      'evil-window-up
      :nv "C-<down>"    'evil-window-down
      :nv "S-<left>"    '+evil/window-move-left
      :nv "S-<right>"   '+evil/window-move-right
      :nv "S-<up>"      '+evil/window-move-up
      :nv "S-<down>"    '+evil/window-move-down
      :nv "C-S-<left>"  'evil-window-move-far-left
      :nv "C-S-<right>" 'evil-window-move-far-right
      :nv "C-S-<up>"    'evil-window-move-very-top
      :nv "C-S-<down>"  'evil-window-move-very-bottom)
(map! :leader
      "w SPC"         'rotate-layout
      "w <left>"      'evil-window-left
      "w <right>"     'evil-window-right
      "w <up>"        'evil-window-up
      "w <down>"      'evil-window-down
      "w C-<left>"    'evil-window-left
      "w C-<right>"   'evil-window-right
      "w C-<up>"      'evil-window-up
      "w C-<down>"    'evil-window-down
      "w S-<left>"    '+evil/window-move-left
      "w S-<right>"   '+evil/window-move-right
      "w S-<up>"      '+evil/window-move-up
      "w S-<down>"    '+evil/window-move-down
      "w C-S-<left>"  'evil-window-move-far-left
      "w C-S-<right>" 'evil-window-move-far-right
      "w C-S-<up>"    'evil-window-move-very-top
      "w C-S-<down>"  'evil-window-move-very-bottom)
#+end_src

* Footnotes

[fn:1] ~eshell~ does have some of the globbing functionality needed, namely
predicates/qualifiers, but globs with qualifiers and no matches in ~eshell~ are
not left unchanged ([[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13_03][the zsh/POSIX behaviour]]) but instead are empty. This is an
issue when using ~ls~, as ~ls~ with no argument - i.e. when there are no
matches - will effectively ignore the provided pattern. Note that ~eshell~ globs
only behave in this manner when a qualifier is provided.
